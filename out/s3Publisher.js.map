{"version":3,"file":"s3Publisher.js","sourceRoot":"","sources":["../src/s3Publisher.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,AAAO,AAAyC,AAAM,AAAoB;;;;;;AAG1E,AAAO,AAAE,AAAe,AAAE,AAAM,AAAmB,AAEnD,AAAM,AAAC,AAAO;;;;;;MAAmB,AAAQ,AAAe;AAGtD,gBAAY,AAAuB,SAAmB,AAAe;AACnE,AAAK,cAAC,AAAO,SAAE,AAAI,AAAC;AADgC,aAAI,OAAJ,AAAI,AAAW;AAF5D,aAAY,eAAG,AAAI,AAI5B;AAAC;AAES,AAAyB;AACjC,YAAI,AAAM,SAAG,AAAI,KAAC,AAAI,KAAC,AAAM,UAAI,AAAS,AAAC;AAC3C,AAAM,eAAC,EAAC,AAAgB,kBAAE,AAAI,MAAE,AAAM,QAAE,AAAM,AAAC,AACjD;AAAC;AAED,AAAM,AAAC,AAAK,WAAC,AAAsB,uBAAC,AAAkB,SAAE,AAAoC;;AAC1F,kBAAM,AAAM,SAAG,AAAO,QAAC,AAAM;AAC7B,AAAE,AAAC,gBAAC,AAAM,UAAI,AAAI,AAAC,MAAC,AAAC;AACnB,sBAAM,IAAI,AAAK,AAAC,MAAmD,AAAC,AACtE;AAAC;AAED,AAAE,AAAC,gBAAC,AAAM,OAAC,AAAQ,QAAC,AAAG,AAAC,eAAI,AAAO,QAAC,AAAM,UAAI,AAAI,AAAC,MAAC,AAAC;AACnD,AAAyH;AACzH,sBAAM,AAAE,KAAG,AAAI,AAAE,8BAAC,EAAC,AAAgB,kBAAE,AAAI,AAAC,AAAC;AAC3C,AAAO,wBAAC,AAAM,SAAG,CAAC,MAAM,AAAE,GAAC,AAAiB,kBAAC,EAAC,AAAM,QAAE,AAAM,AAAC,AAAC,UAAC,AAAO,AAAE,AAAC,WAAC,AAAkB,AAC9F;AAAC;AAED,AAAE,AAAC,gBAAC,AAAO,QAAC,AAAO,WAAI,AAAI,QAAI,AAAqB,yBAAI,AAAI,AAAC,MAAC,AAAC;AAC7D,AAAO,wBAAC,AAAO,UAAG,AAAqB,AACzC;AAAC,AACH;;AAAC;AAES,AAAa;AACrB,AAAM,eAAC,AAAI,KAAC,AAAI,KAAC,AAAO,AAC1B;AAAC;AAES,AAAkB,uBAAC,AAA0C;AACrE,AAAK,cAAC,AAAkB,mBAAC,AAAS,AAAC;AAEnC,AAAE,AAAC,YAAC,AAAI,KAAC,AAAI,KAAC,AAAY,gBAAI,AAAI,AAAC,MAAC,AAAC;AACnC,AAAS,sBAAC,AAAY,eAAG,AAAI,KAAC,AAAI,KAAC,AAA4B,AACjE;AAAC,AACH;AAAC,AACF","sourcesContent":["import S3, { ClientConfiguration, StorageClass } from \"aws-sdk/clients/s3\"\nimport { S3Options } from \"builder-util-runtime\"\nimport { PublishContext } from \"electron-publish\"\nimport { BaseS3Publisher } from \"./BaseS3Publisher\"\n\nexport default class S3Publisher extends BaseS3Publisher {\n  readonly providerName = \"S3\"\n\n  constructor(context: PublishContext, private readonly info: S3Options) {\n    super(context, info)\n  }\n\n  protected createClientConfiguration(): ClientConfiguration {\n    let region = this.info.region || undefined;\n    return {signatureVersion: \"v4\", region: region}\n  }\n\n  static async checkAndResolveOptions(options: S3Options, channelFromAppVersion: string | null) {\n    const bucket = options.bucket\n    if (bucket == null) {\n      throw new Error(`Please specify \"bucket\" for \"s3\" publish provider`)\n    }\n\n    if (bucket.includes(\".\") && options.region == null) {\n      // on dotted bucket names, we need to use a path-based endpoint URL. Path-based endpoint URLs need to include the region.\n      const s3 = new S3({signatureVersion: \"v4\"})\n      options.region = (await s3.getBucketLocation({Bucket: bucket}).promise()).LocationConstraint\n    }\n\n    if (options.channel == null && channelFromAppVersion != null) {\n      options.channel = channelFromAppVersion\n    }\n  }\n\n  protected getBucketName(): string {\n    return this.info.bucket!\n  }\n\n  protected configureS3Options(s3Options: S3.CreateMultipartUploadRequest): void {\n    super.configureS3Options(s3Options)\n\n    if (this.info.storageClass != null) {\n      s3Options.StorageClass = this.info.storageClass as StorageClass\n    }\n  }\n}"]}
