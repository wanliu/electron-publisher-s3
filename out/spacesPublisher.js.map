{"version":3,"file":"spacesPublisher.js","sourceRoot":"","sources":["../src/spacesPublisher.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AACA,AAAO,AAAE,AAAe,AAAE,AAAM,AAAc;;;;;;AAG9C,AAAO,AAAE,AAAe,AAAE,AAAM,AAAmB,AAEnD,AAAM,AAAC,AAAO;;;;MAAuB,AAAQ,AAAe;AAG1D,gBAAY,AAAuB,SAAmB,AAAmB;AACvE,AAAK,cAAC,AAAO,SAAE,AAAI,AAAC;AADgC,aAAI,OAAJ,AAAI,AAAe;AAFhE,aAAY,eAAG,AAAQ,AAIhC;AAAC;AAED,AAAM,AAAC,AAAK,WAAC,AAAsB,uBAAC,AAAsB,SAAE,AAAoC;;AAC9F,AAAE,AAAC,gBAAC,AAAO,QAAC,AAAI,QAAI,AAAI,AAAC,MAAC,AAAC;AACzB,sBAAM,IAAI,AAAK,AAAC,MAA0H,AAAC,AAC7I;AAAC;AACD,AAAE,AAAC,gBAAC,AAAO,QAAC,AAAM,UAAI,AAAI,AAAC,MAAC,AAAC;AAC3B,sBAAM,IAAI,AAAK,AAAC,MAA4H,AAAC,AAC/I;AAAC;AAED,AAAE,AAAC,gBAAC,AAAO,QAAC,AAAO,WAAI,AAAI,QAAI,AAAqB,yBAAI,AAAI,AAAC,MAAC,AAAC;AAC7D,AAAO,wBAAC,AAAO,UAAG,AAAqB,AACzC;AAAC,AACH;;AAAC;AAES,AAAa;AACrB,AAAM,eAAC,AAAI,KAAC,AAAI,KAAC,AAAI,AACvB;AAAC;AAES,AAAyB;AACjC,cAAM,AAAa,gBAAG,AAAK,MAAC,AAAyB,AAAE;AACvD,AAAa,sBAAC,AAAQ,AAAG,cAAG,AAAI,KAAC,AAAI,KAAC,AAAM,MAAyB;AACrE,cAAM,AAAW,cAAG,AAAO,QAAC,AAAG,IAAC,AAAS;AACzC,cAAM,AAAe,kBAAG,AAAO,QAAC,AAAG,IAAC,AAAa;AACjD,AAAE,AAAC,YAAC,AAAe,2DAAC,AAAW,AAAC,AAAC,cAAC,AAAC;AACjC,kBAAM,IAAI,AAAK,MAAC,AAA+F,AAAC,AAClH;AAAC;AACD,AAAE,AAAC,YAAC,AAAe,2DAAC,AAAe,AAAC,AAAC,kBAAC,AAAC;AACrC,kBAAM,IAAI,AAAK,MAAC,AAAmG,AAAC,AACtH;AAAC;AAED,AAAa,sBAAC,AAAW,cAAG,EAAC,AAAW,aAAE,AAAe,AAAC;AAC1D,AAAM,eAAC,AAAa,AACtB;AAAC;AAES,AAAkB,uBAAC,AAAuC;AAClE,AAAK,cAAC,AAAkB,mBAAC,AAAS,AAAC,AACrC;AAAC,AACF","sourcesContent":["import { ClientConfiguration, CreateMultipartUploadRequest } from \"aws-sdk/clients/s3\"\nimport { isEmptyOrSpaces } from \"builder-util\"\nimport { SpacesOptions } from \"builder-util-runtime\"\nimport { PublishContext } from \"electron-publish\"\nimport { BaseS3Publisher } from \"./BaseS3Publisher\"\n\nexport default class SpacesPublisher extends BaseS3Publisher {\n  readonly providerName = \"Spaces\"\n\n  constructor(context: PublishContext, private readonly info: SpacesOptions) {\n    super(context, info)\n  }\n\n  static async checkAndResolveOptions(options: SpacesOptions, channelFromAppVersion: string | null) {\n    if (options.name == null) {\n      throw new Error(`Please specify \"name\" for \"spaces\" publish provider (see https://www.electron.build/configuration/publish#spacesoptions)`)\n    }\n    if (options.region == null) {\n      throw new Error(`Please specify \"region\" for \"spaces\" publish provider (see https://www.electron.build/configuration/publish#spacesoptions)`)\n    }\n\n    if (options.channel == null && channelFromAppVersion != null) {\n      options.channel = channelFromAppVersion\n    }\n  }\n\n  protected getBucketName(): string {\n    return this.info.name\n  }\n\n  protected createClientConfiguration(): ClientConfiguration {\n    const configuration = super.createClientConfiguration()\n    configuration.endpoint = `${this.info.region}.digitaloceanspaces.com`\n    const accessKeyId = process.env.DO_KEY_ID\n    const secretAccessKey = process.env.DO_SECRET_KEY\n    if (isEmptyOrSpaces(accessKeyId)) {\n      throw new Error(\"Please set env DO_KEY_ID (see https://www.electron.build/configuration/publish#spacesoptions)\")\n    }\n    if (isEmptyOrSpaces(secretAccessKey)) {\n      throw new Error(\"Please set env DO_SECRET_KEY (see https://www.electron.build/configuration/publish#spacesoptions)\")\n    }\n\n    configuration.credentials = {accessKeyId, secretAccessKey}\n    return configuration\n  }\n\n  protected configureS3Options(s3Options: CreateMultipartUploadRequest): void {\n    super.configureS3Options(s3Options)\n  }\n}"]}
