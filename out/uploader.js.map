{"version":3,"file":"uploader.js","sourceRoot":"","sources":["../src/uploader.ts"],"names":[],"mappings":"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","sourcesContent":["import { config as awsConfig, S3 } from \"aws-sdk\"\nimport { CreateMultipartUploadRequest } from \"aws-sdk/clients/s3\"\nimport BluebirdPromise from \"bluebird-lst\"\nimport { hashFile } from \"builder-util\"\nimport { EventEmitter } from \"events\"\nimport { createReadStream } from \"fs-extra-p\"\nimport { cpus } from \"os\"\nimport { createHash } from \"crypto\"\n\nconst MAX_PUT_OBJECT_SIZE = 5 * 1024 * 1024 * 1024\nconst MAX_MULTIPART_COUNT = 10000\nconst MIN_MULTIPART_SIZE = 5 * 1024 * 1024\nconst commonUploadSize = 15 * 1024 * 1024\n\nawsConfig.setPromisesDependency(require(\"bluebird-lst\"))\n\nexport class Uploader extends EventEmitter {\n  /** @readonly */\n  loaded = 0\n\n  private cancelled = false\n\n  readonly s3RetryCount: number\n  readonly s3RetryDelay: number\n  readonly multipartUploadThreshold: number\n  readonly multipartUploadSize: number\n  readonly multipartDownloadThreshold: number\n  readonly multipartDownloadSize: number\n\n  constructor(private readonly s3: S3, private readonly s3Options: CreateMultipartUploadRequest, private readonly localFile: string, readonly contentLength: number, private readonly fileContent: Buffer | null | undefined) {\n    super()\n\n    this.s3RetryCount = 3\n    this.s3RetryDelay = 1000\n\n    this.multipartUploadThreshold = (20 * 1024 * 1024)\n    this.multipartUploadSize = commonUploadSize\n    this.multipartDownloadThreshold = (20 * 1024 * 1024)\n    this.multipartDownloadSize = commonUploadSize\n\n    if (this.multipartUploadThreshold < MIN_MULTIPART_SIZE) {\n      throw new Error(\"Minimum multipartUploadThreshold is 5MB.\")\n    }\n    if (this.multipartUploadThreshold > MAX_PUT_OBJECT_SIZE) {\n      throw new Error(\"Maximum multipartUploadThreshold is 5GB.\")\n    }\n    if (this.multipartUploadSize < MIN_MULTIPART_SIZE) {\n      throw new Error(\"Minimum multipartUploadSize is 5MB.\")\n    }\n    if (this.multipartUploadSize > MAX_PUT_OBJECT_SIZE) {\n      throw new Error(\"Maximum multipartUploadSize is 5GB.\")\n    }\n  }\n\n  async upload() {\n    const fileContent = this.fileContent\n    if (fileContent != null) {\n      const hash = createHash(\"md5\")\n      hash.update(fileContent)\n      const md5 = hash.digest(\"base64\")\n      await this.runOrRetry(() => this.putObject(md5))\n      return\n    }\n\n    if (this.contentLength < this.multipartUploadThreshold) {\n      const md5 = await hashFile(this.localFile, \"md5\")\n      await this.runOrRetry(() => this.putObject(md5))\n      return\n    }\n\n    let multipartUploadSize = this.multipartUploadSize\n    if (Math.ceil(this.contentLength / multipartUploadSize) > MAX_MULTIPART_COUNT) {\n      multipartUploadSize = smallestPartSizeFromFileSize(this.contentLength)\n    }\n\n    if (multipartUploadSize > MAX_PUT_OBJECT_SIZE) {\n      throw new Error(`File size exceeds maximum object size: ${this.localFile}`)\n    }\n\n    const data = await this.runOrRetry(() => this.s3.createMultipartUpload(this.s3Options).promise())\n    await this.multipartUpload(data.UploadId!, multipartUploadSize)\n  }\n\n  abort() {\n    this.cancelled = true\n  }\n\n  private putObject(md5: string) {\n    this.loaded = 0\n    return new BluebirdPromise<any>((resolve, reject) => {\n      this.s3.putObject({\n        Body: this.fileContent || createReadStream(this.localFile),\n        ContentMD5: md5,\n        ...this.s3Options,\n      })\n        .on(\"httpUploadProgress\", progress => {\n          this.loaded = progress.loaded\n          this.emit(\"progress\")\n        })\n        .send((error, data) => {\n          if (error == null) {\n            resolve(data)\n          }\n          else {\n            reject(error)\n          }\n        })\n    })\n  }\n\n  private async multipartUpload(uploadId: string, multipartUploadSize: number): Promise<any> {\n    let cursor = 0\n    let nextPartNumber = 1\n\n    const partsA: Array<any> = []\n\n    const parts: Array<Part> = []\n    while (cursor < this.contentLength) {\n      const start = cursor\n      let end = cursor + multipartUploadSize\n      if (end > this.contentLength) {\n        end = this.contentLength\n      }\n      cursor = end\n      const part = {\n        PartNumber: nextPartNumber++,\n      }\n      partsA.push(part)\n      parts.push({start, end, part, md5: \"\"})\n    }\n\n    await BluebirdPromise.map(parts, async it => {\n      // hashFile - both start and end are inclusive\n      it.md5 = await hashFile(this.localFile, \"md5\", \"base64\", {start: it.start, end: it.end - 1})\n    }, {concurrency: cpus().length})\n\n    await BluebirdPromise.map(parts, it => this.makeUploadPart(it, uploadId), {concurrency: 4})\n    return await this.runOrRetry(() => this.s3.completeMultipartUpload({\n        Bucket: this.s3Options.Bucket,\n        Key: this.s3Options.Key,\n        UploadId: uploadId,\n        MultipartUpload: {\n          Parts: partsA,\n        },\n      }).promise()\n    )\n  }\n\n  private makeUploadPart(part: Part, uploadId: string): Promise<any> {\n    const contentLength = part.end - part.start\n    return this.runOrRetry(() => {\n      let partLoaded = 0\n      return new BluebirdPromise((resolve, reject) => {\n        this.s3.uploadPart({\n          ContentLength: contentLength,\n          PartNumber: part.part.PartNumber,\n          UploadId: uploadId,\n          Body: createReadStream(this.localFile, {start: part.start, end: part.end - 1}),\n          Bucket: this.s3Options.Bucket,\n          Key: this.s3Options.Key,\n          ContentMD5: part.md5,\n        })\n          .on(\"httpUploadProgress\", progress => {\n            partLoaded = progress.loaded\n            this.loaded += progress.loaded\n            this.emit(\"progress\")\n          })\n          .send((error, data) => {\n            if (error == null) {\n              part.part.ETag = data.ETag\n              resolve(data)\n            }\n            else {\n              this.loaded -= partLoaded\n              reject(error)\n            }\n          })\n      })\n    })\n  }\n\n  private async runOrRetry<T>(task: () => Promise<T>): Promise<T> {\n    return new BluebirdPromise<T>((resolve, reject) => {\n      let attemptNumber = 0\n      const tryRun = () => {\n        if (this.cancelled) {\n          return\n        }\n\n        task()\n          .then(resolve)\n          .catch(error => {\n            if (++attemptNumber >= this.s3RetryCount) {\n              reject(error)\n            }\n            else if (this.cancelled) {\n              reject(new Error(\"cancelled\"))\n            }\n            else {\n              setTimeout(tryRun, this.s3RetryDelay)\n            }\n          })\n      }\n\n      tryRun()\n    })\n  }\n}\n\ninterface Part {\n  start: number\n  end: number\n  part: any\n  md5: string\n}\n\nfunction smallestPartSizeFromFileSize(fileSize: number) {\n  const partSize = Math.ceil(fileSize / MAX_MULTIPART_COUNT)\n  return partSize < MIN_MULTIPART_SIZE ? MIN_MULTIPART_SIZE : partSize\n}"]}
